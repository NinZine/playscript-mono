// Copyright 2013 Zynga Inc.
//	
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//		
//      Unless required by applicable law or agreed to in writing, software
//      distributed under the License is distributed on an "AS IS" BASIS,
//      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//      See the License for the specific language governing permissions and
//      limitations under the License.

package {

	import System.Xml.*;
	import System.Collections.*;
	import System.Collections.Generic.*;
	import System.Linq.*;

	public class XMLList implements IEnumerable.<XML> {
	
		//
		// Methods
		//
		
		public function XMLList(value:Object) {
			if (value == null) {
				// empty
			}
			else if (value is XmlNodeList) {
				// create list of XML from node list
				for each ( var node:XmlNode in value) {
					if (node is XmlElement) {
						mList.Add(new XML(node));
					}
				}
			}
			else if (value is XmlNode) {
				mList.Add(new XML(value as XmlNode));
			} else if (value is String) {
				mString = String(value);
			} else {
				throw new System.NotImplementedException();
			}
		}
		
		public function attribute(attributeName:String):String {
			if (mList.Count == 0)
				return null;

			if (mList.Count != 1)
				throw new System.NotImplementedException();
			
			return mList[0].attribute(attributeName);
		}
		
		public function attributes():XMLList {
			throw new System.NotImplementedException();
		}
		
		public function child(propertyName:Object):XMLList {
			throw new System.NotImplementedException();
		}
		
		public function children():XMLList {
			if (mList.Count == 0)
				return null;
			
			if (mList.Count != 1)
				throw new System.NotImplementedException();
			
			return mList[0].children();
		}
		
		public function comments():XMLList {
			throw new System.NotImplementedException();
		}
		
		public function contains(value:XML):Boolean {
			throw new System.NotImplementedException();
		}
		
		public function copy():XMLList {
			throw new System.NotImplementedException();
		}

		public function descendants():XMLList {
			throw new System.NotImplementedException();
		}
						
		public function descendants(name:Object /*="*"*/):XMLList {
			throw new System.NotImplementedException();
		}
		
		public function elements():XMLList {
			if (mList.Count == 0)
				return new XMLList(null);
			
			if (mList.Count == 1)
				return mList[0].elements();
			
			throw new System.NotImplementedException();
		}
		
		public function elements(name:String /*="*"*/):XMLList {
			if (mList.Count == 0)
				return new XMLList(null);

			if (mList.Count == 1)
				return mList[0].elements(name);

			throw new System.NotImplementedException();
		}
		
		public function hasComplexContent():Boolean {
			throw new System.NotImplementedException();
		}
		
		public function hasOwnProperty(p:String):Boolean {
			throw new System.NotImplementedException();
		}
		
		public function hasSimpleContent():Boolean {
			throw new System.NotImplementedException();
		}
		
		public function length():int {
			return mList.Count;
		}
		
		public function normalize():XMLList {
			throw new System.NotImplementedException();
		}
		
		public function parent():Object {
			throw new System.NotImplementedException();
		}
		
		public function processingInstructions(name:String = "*"):XMLList {
			throw new System.NotImplementedException();
		}
		
		public function propertyIsEnumerable(p:String):Boolean {
			throw new System.NotImplementedException();
		}
		
		public function text():XMLList {
			throw new System.NotImplementedException();
		}

		public override function toString():String {
			return (mString != null) ? mString : "";
		}
		
		public function toXMLString():String {
			return mList[0].toXMLString();
		}
		
		public override function valueOf():Object {
			throw new System.NotImplementedException();
		}
		
		public function appendChild(child:XML):void {
			throw new System.NotImplementedException();
		}

		public indexer this(index:int):XML {
			get { 
				return mList[index];
			}
		}
		
		public static implicit operator String (list:XMLList) {
			if (list!=null) {
				if (list.mString != null) { 
					return list.mString;
				} else if (list.mList!=null && list.mList.Count > 0) {
					return list.toXMLString();
				} else {
					return null;
				}
			} else {
				return null;
			}
		}

		public static implicit operator int (list:XMLList) {
			throw new System.NotImplementedException();
		}

		public static implicit operator uint (list:XMLList) {
			throw new System.NotImplementedException();
		}

		public static implicit operator Boolean (list:XMLList) {
			throw new System.NotImplementedException();
		}

		public static implicit operator Number (list:XMLList) {
			throw new System.NotImplementedException();
		}
/*
		public static operator+(leftList:XMLList, rightList:XMLList):XMLList {
			throw new System.NotImplementedException();
		}
*/
		public static function merge(leftList:XMLList, rightList:XMLList):XMLList {
			var output:XMLList = new XMLList(null);
			for each(var item1:XML in leftList)
			{
				output.appendChild(item1);
			}
			for each(var item2:XML in rightList)
			{
				output.appendChild(item2);
			}
			return output;
		}

		function IEnumerable.<XML>.GetEnumerator() : IEnumerator.<XML> {
			return mList.GetEnumerator();
		}
		
		function IEnumerable.GetEnumerator() : IEnumerator { 
			return mList.GetEnumerator();
		}


		var mList:List.<XML> = new List.<XML>();
		var mString:String;
	}

}
