// Copyright 2013 Zynga Inc.
//	
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//		
//      Unless required by applicable law or agreed to in writing, software
//      distributed under the License is distributed on an "AS IS" BASIS,
//      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//      See the License for the specific language governing permissions and
//      limitations under the License.

package flash.geom {

	public final class Vector3D {
	
		//
		// Constants
		//
		
 	
 	 	public static const X_AXIS : Vector3D = new Vector3D(1,0,0);

		public static const Y_AXIS : Vector3D = new Vector3D(0,1,0);

		public static const Z_AXIS : Vector3D = new Vector3D(0,0,1);
	
		//
		// Properties
		//
	
	 	public property length : Number 
		{ 
			get {return System.Math.Sqrt(x * x + y * y + z * z);} 
		}

		public property lengthSquared : Number 
		{ 
			get {return (x * x + y * y + z * z);} 
		}

		public var x : Number;
		public var y : Number;
		public var z : Number;
		public var w : Number;

 	 	//
 	 	// Methods
 	 	//
 	 	
		public function Vector3D(x:Number = 0.0, y:Number = 0.0, z:Number = 0.0, w:Number = 0.0) {
			this.x = x;
			this.y = y;
			this.z = z;
			this.w = w;
		}

		public function add(a:Vector3D):Vector3D {
			return new Vector3D(x + a.x, y + a.y, z + a.z, w + a.w);
		}
 	 	
		public static function angleBetween(a:Vector3D, b:Vector3D):Number {
			throw new System.NotImplementedException();
		}
 	 	
		public function clone():Vector3D {
			return new Vector3D(x,y,z,w);
		}

		public function copyFrom(sourceVector3D:Vector3D):void {
			this.x = sourceVector3D.x;
			this.y = sourceVector3D.y;
			this.z = sourceVector3D.z;
			this.w = sourceVector3D.w;
		}
 	 	
		public function crossProduct(a:Vector3D):Vector3D {
			var result:Vector3D = new Vector3D();
			var v1:Vector3D = this;
			var v2:Vector3D = a;

			result.x =  v1.y * v2.z - v1.z * v2.y;
			result.y =  v1.z * v2.x - v1.x * v2.z;
			result.z =  v1.x * v2.y - v1.y * v2.x;
			result.w = 1.0;
			return result;
		}
 	 	
		public function decrementBy(a:Vector3D):void {
			this.x -= a.x;
			this.y -= a.y;
			this.z -= a.z;
			this.w -= a.w;
		}

 	 	public static function distance(pt1:Vector3D, pt2:Vector3D):Number {
			var vec:Vector3D = pt1.subtract(pt2);
			return vec.length;
		}
 	 	
		public function dotProduct(a:Vector3D):Number {
			return this.x * a.x + this.y * a.y + this.z * a.z; // W??
		}
 	 	
		public function equals(toCompare:Vector3D, allFour:Boolean = false):Boolean {
			throw new System.NotImplementedException();
		}
 	 	
		public function incrementBy(a:Vector3D):void {
			this.x += a.x;
			this.y += a.y;
			this.z += a.z;
			this.w += a.w;
		}
 	 	
		public function nearEquals(toCompare:Vector3D, tolerance:Number, allFour:Boolean = false):Boolean {
			throw new System.NotImplementedException();
		}
 	 	
		public function negate():void {
			this.x = -this.x;
			this.y = -this.y;
			this.z = -this.z;
			this.w = -this.w;
		}
 	 	
		public function normalize():Number {
			var mag:double = length;
			if (mag == 0.0) {
				// handle normalization of a zero length vector
				return 0.0;
			}
			
			var invmag:double = 1.0 / mag;
			// normalize
			x *= invmag;
			y *= invmag;
			z *= invmag;
			return mag; // or return 1.0 ? 
		}
 	 	
		public function project():void {
			throw new System.NotImplementedException();
		}
 	 	
		public function scaleBy(s:Number):void {
			this.x *= s;
			this.y *= s;
			this.z *= s;
			// w ?
		}
 	 	
		public function setTo(xa:Number, ya:Number, za:Number):void {
			this.x = xa;
			this.y = ya;
			this.z = za;
		}
 	 	
		public function subtract(a:Vector3D):Vector3D {
			var o:Vector3D = new Vector3D();
			o.x = this.x - a.x;
			o.y = this.y - a.y;
			o.z = this.z - a.z;
			//w?
			return o;
		}
 	 	
		public override function toString():String {
			return  x.ToString() + ","  + y.ToString() + "," + z.ToString();
		}

		public indexer this (index:String):Number {
			get {throw new System.NotImplementedException(); }
			set {throw new System.NotImplementedException(); }
		}

	}

}
