// Copyright 2013 Zynga Inc.
//	
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//		
//      Unless required by applicable law or agreed to in writing, software
//      distributed under the License is distributed on an "AS IS" BASIS,
//      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//      See the License for the specific language governing permissions and
//      limitations under the License.

package flash.system {

	public static class Capabilities {
	
		//
		// Properties
		//
	
		public static property avHardwareDisable : Boolean { get { throw new Error(); } }
		
		public static property cpuArchitecture : String { get { throw new Error(); } }
		
		public static property hasAccessibility : Boolean { get { throw new Error(); } }
		
		public static property hasAudio : Boolean { get { throw new Error(); } }
		
		public static property hasAudioEncoder : Boolean { get { throw new Error(); } }
		
		public static property hasEmbeddedVideo : Boolean { get { throw new Error(); } }
		
		public static property hasIME : Boolean { get { throw new Error(); } }
		
		public static property hasMP3 : Boolean { get { throw new Error(); } }
		
		public static property hasPrinting : Boolean { get { throw new Error(); } }
		
		public static property hasScreenBroadcast : Boolean { get { throw new Error(); } }
		
		public static property hasScreenPlayback : Boolean { get { throw new Error(); } }
		
		public static property hasStreamingAudio : Boolean { get { throw new Error(); } }
		
		public static property hasStreamingVideo : Boolean { get { throw new Error(); } }
		
		public static property hasTLS : Boolean { get { throw new Error(); } }
		
		public static property hasVideoEncoder : Boolean { get { throw new Error(); } }
		
		public static property isDebugger : Boolean { get { return true; } }
		
		public static property isEmbeddedInAcrobat : Boolean { get { throw new Error(); } }
		
		public static property language : String { get { throw new Error(); } }
		
		public static property languages : Array { get { throw new Error(); } }
		
		public static property localFileReadDisable : Boolean { get { throw new Error(); } }
		
		public static property manufacturer : String { 
			get { 
#if PLATFORM_MONOMAC || PLATFORM_MONOTOUCH 
				return "iOS";
#elif PLATFORM_MONODROID
				return Android.OS.Build.Manufacturer;
#else
				return null;
#endif			
			} 
		}
		
		public static property maxLevelIDC : String { get { throw new Error(); } }
		
		public static property os : String { get { throw new Error(); } }
		
		public static property pixelAspectRatio : Number { get { throw new Error(); } }
		
		public static property playerType : String { get { return "Desktop"; } }
		
		public static property screenColor : String { get { throw new Error(); } }
		
		public static property screenDPI : Number { get { throw new Error(); } }
		
		public static property screenResolutionX : Number { get { throw new Error(); } }
		
		public static property screenResolutionY : Number { get { throw new Error(); } }
		
		public static property serverString : String { 
			get { 
//				var caps = new flash.net.URLVariables();
//				caps["M"] = "Adobe Macintosh";
//				caps["R"] = "1680x1050";
//				caps["COL"] = "color";
//				caps["OS"] = "Mac OS 10.7.4";
//				caps["ARCH"] = "x86";
//				caps["AR"] = "1.0";
//				caps["L"] = "en";
//				caps["PR32"] = "t";
//				caps["PR64"] = "t";
//				caps["LS"] = "en;ja;fr;de;es;it;pt;pt-PT;nl;sv;nb;da;fi;ru;pl;zh-Hans;zh-Hant;ko;ar;cs;hu;tr";

				// TODO: compose this using URL Variables
				return "&M=Adobe%20Macintosh&R=1920x1200&COL=color&AR=1.0&OS=Mac%20OS%2010.7.4&ARCH=x86&L=en&PR32=t&PR64=t&LS=en;ja;fr;de;es;it;pt;pt-PT;nl;sv;nb;da;fi;ru;pl;zh-Hans;zh-Hant;ko;ar;cs;hu;tr";
			} 
		}
		
		public static property supports32BitProcesses : Boolean { get { throw new Error(); } }
		
		public static property supports64BitProcesses : Boolean { get { throw new Error(); } }
		
		public static property touchscreenType : String { get { throw new Error(); } }
		
		public static property version : String { get { return "MAC 11,7,700,203"; } }

		//
		// Methods
		//
						
		public static function hasMultiChannelAudio(type:String):Boolean {
			throw new Error();
		}
	
	}

}
